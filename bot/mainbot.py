import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from settings import *
from wb_request import get_info_from_wb
from my_db import *


class Get_info_state(StatesGroup):
    first = State()
    second = State()


dp = Dispatcher()


kb_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É ‚ÑπÔ∏è"),],
        [KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üö´"),],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î üìã"),],
    ],
    resize_keyboard=True,
)

ikb_exit = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f'exit')]])


@dp.callback_query(F.data =='exit', Get_info_state.first)
async def exit(call, state: FSMContext):
    await state.clear()
    await call.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!")


@dp.callback_query(F.data.contains('subscribe'))
async def subscribe(call):
    if add_user_sub(user_id=call.message.chat.id, article=call.data.split("_")[-1]):
        await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
    else:
        await call.answer("–ö–∞–∂–µ—Ç—Å—è –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä")

@dp.message(CommandStart())
async def start(message):
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb_menu)


@dp.message(Get_info_state.first)
async def get_info(message, state: FSMContext):
    if data := get_info_from_wb(message.text):

        ikb_add_sub = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ", callback_data=f'subscribe_{data["article"]}')]])

        await message.answer(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {data['name']}\n\n–¶–µ–Ω–∞: {data['price']/ 100:.2f} –†—É–± üí∞\n"\
                             f"–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {data['product_rating']}‚≠ê\n–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö: {data['quantity_of_product']}üì¶\n\n"\
                             f"–ê—Ä—Ç–∏–∫—É–ª: {data['article']}üè∑Ô∏è", reply_markup=ikb_add_sub)
        await state.clear()
    else:
        await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª", reply_markup=ikb_exit)


@dp.message()
async def menu(message, state: FSMContext):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É ‚ÑπÔ∏è":
        await state.set_state(Get_info_state.first)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞", reply_markup=ikb_exit)

    elif message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üö´":
        del_user_subs(user_id=message.chat.id)
        await message.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î üìã":
        data = get_5last(user_id=message.chat.id)
        c = "\n"
        await message.answer("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + ''.join([f"- {article[0]} {article[1].strftime('%Y-%m-%d %H:%M:%S')} {c}\n" for article in data]))



async def main():
    bot = Bot(token=api_token)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
